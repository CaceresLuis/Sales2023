@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (Categories is null)
{
    <div class="spinner-grow" />
}

<GenericList MyList="Categories">
    <Body>
        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-list" /> Categorias
                    <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus">Agregar Categoria</i></a>
                </span>
            </div>
            <div class="card-body">
                <div class="sm-2" style="display:flex; flex-wrap:wrap; align-items:center">
                    <div>
                        <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar Categortia... " @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers"/>Filtrar</button>
                        <button type="button" class="btn btn-primary" @onclick="CleanFilterAsync"><i class="oi oi-ban" />Limpiar</button>
                    </div>
                </div>
                <Pagination CurrentPage="currentpage" TotalPages="totalPage" SelectedPage="SelectedPageAsync" />
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Categoria</th>
                            <th style="width:200px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in Categories!)
                        {
                            <tr>
                                <td>
                                    @category.Name
                                </td>
                                <td>
                                    <a class="btn btn-warning" @onclick=@(() => ShowModal(category.Id, true))><i class="oi oi-pencil"></i></a>
                                    <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))><i class="oi oi-trash"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Body>
</GenericList>

@code {
    private int totalPage;
    private int currentpage = 1;
    public List<CategoryDto>? Categories { get; set; }

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentpage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        var url2 = (string.IsNullOrEmpty(Filter)) ? "categories/totalPages" : $"categories/totalPages?filter={Filter}";
        var url1 = (string.IsNullOrEmpty(Filter)) ? $"categories?page={page}" : $"categories?page={page}&filter={Filter}";

        var httpResponsePage = await repository.Get<int>(url2);
        var httpResponseCatgories = await repository.Get<List<CategoryDto>>(url1);
        if(httpResponseCatgories.Error)
        {
            var message = await httpResponseCatgories.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        totalPage = httpResponsePage.Response;
        Categories = httpResponseCatgories.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"categories/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Borrado", "La categoria fue borrada", SweetAlertIcon.Success);
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CategoryEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<CategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}
