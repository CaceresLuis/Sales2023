@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Categorias</h3>

<div class="mb-2" style="display:flex; flex-wrap:wrap; align-items:center">
    <div>
        <a class="btn btn-primary mb-3" href="/categories/create">Crear categoria <i class="oi oi-plus"></i></a>
    </div>
    <div class="mx-2">
        <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar Categortia... " @bind-value="Filter"/>
    </div>
    <div>
        <button type="button" class="btn btn-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-primary" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

<Pagination CurrentPage="currentpage" TotalPages="totalPage" SelectedPage="SelectedPageAsync" />

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Categoria</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id"><i class="oi oi-pencil"></i></a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))><i class="oi oi-trash"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<CategoryDto>? Categories { get; set; }
    private int currentpage = 1;
    private int totalPage;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentpage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        var url2 = (string.IsNullOrEmpty(Filter)) ? "categories/totalPages" : $"categories/totalPages?filter={Filter}";
        var url1 = (string.IsNullOrEmpty(Filter)) ? $"categories?page={page}" : $"categories?page={page}&filter={Filter}";

        var httpResponsePage = await repository.Get<int>(url2);
        var httpResponseCatgories = await repository.Get<List<CategoryDto>>(url1);
        if(httpResponseCatgories.Error)
        {
            var message = await httpResponseCatgories.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        totalPage = httpResponsePage.Response;
        Categories = httpResponseCatgories.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"categories/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Borrado", "La categoria fue borrada", SweetAlertIcon.Success);
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
