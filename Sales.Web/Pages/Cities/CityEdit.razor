@page "/cities/edit/{cityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Country Edit</h3>

@if (city is null)
{
    <p>Cargando...</p>
}
else
{
    <CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Back" />
}

@code {
    private CityDto? city;
    private CityForm? cityForm;

    [Parameter]
    public int cityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<CityDto>($"cities/id?id={cityId}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            Back();
        }

        city = httpResponse.Response;
    }

    private async Task EditAsync()
    {
        var httpResponse = await repository.Put($"cities/id?id={cityId}", city);
        if (httpResponse.Error)
        {
            string? message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await sweetAlertService.FireAsync("Actualizado", "Laciudad fue Actualizada", SweetAlertIcon.Success);
        Back();
    }

    private void Back()
    {
        cityForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"states/details/{city!.StateId}");
    }
}
