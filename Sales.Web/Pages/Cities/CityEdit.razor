@page "/cities/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles ="Admin")]

<h3>Country Edit</h3>

@if (City is null)
{
    <p>Cargando...</p>
}
else
{
    <CityForm @ref="cityForm" City="City" OnValidSubmit="EditAsync" ReturnAction="Back" />
}

@code {
    private CityDto? City;
    private CityForm? cityForm;

    [Parameter]
    public int cityId { get; set; }
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<CityDto>($"cities/id?id={cityId}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            Back();
        }

        City = httpResponse.Response;
    }

    private async Task EditAsync()
    {
        var httpResponse = await repository.Put($"cities/id?id={cityId}", City);
        if (httpResponse.Error)
        {
            string? message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("La ciudad fue Actualizada.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Check;});
        Back();
    }

    private void Back()
    {
        cityForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"states/details/{City!.StateId}");
    }
}
