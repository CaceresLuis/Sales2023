@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>Pais:</label>
        <div>
            <InputText class="form-control" @bind-Value="Country.Name"/>
            <ValidationMessage For="@(() => Country.Name)"/>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {

    private EditContext editContext { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public CountryDto Country { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new (Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
            return;

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmacion",
            Text = "Deseas abandonar la pagina y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        bool confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        context.PreventNavigation();

    }
}
