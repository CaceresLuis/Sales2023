@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if(Countries is null)
{
    <div class="spinner-grow" />
}

<GenericList MyList="Countries">
    <Body>
        <div class="card">
            <div class="card-header">
                <span>
                    <div class="oi oi-list">Paises</div>
                    <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus" />Nuevo pais</a>
                </span>
            </div>
            <div class="card-body">
                <div class="sm-2" style="display:flex; flex-wrap:wrap; align-items:center">
                    <div>
                        <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar pais..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" />Filtrar</button>
                        <button type="button" class="btn btn-primary" @onclick="CleanFiltrAync"><i class="oi oi-ban" />Limpiar</button>
                    </div>
                </div>
                <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Pais</th>
                            <th style="width:220px">Estados / Departamentos</th>
                            <th style="width:260px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var country in Countries!)
                        {
                            <tr>
                                <td>
                                    @country.Name
                                </td>
                                <td>
                                    @country.StatesNumber
                                </td>
                                <td>
                                    <a class="btn btn-info" href="/countries/details/@country.Id"><i class="oi oi-list"></i></a>
                                    <a class="btn btn-warning" @onclick=@(() => ShowModal(country.Id, true))><i class="oi oi-pencil"></i></a>
                                    <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))><i class="oi oi-trash"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </Body>
</GenericList>

@code {
    private int totalPages;
    private int currentPage = 1;
    public List<CountryDto>? Countries { get; set; }

    [Parameter] 
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter] 
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        string pagueUrl = (string.IsNullOrEmpty(Filter)) ? "countries/totalPages" : $"countries/totalPages?filter={Filter}";
        string countryUrl = (string.IsNullOrEmpty(Filter)) ? $"countries?page={page}" : $"countries?page={page}&filter={Filter}";

        try
        {
            var httpResponsePages = await repository.Get<int>(pagueUrl);
            var httpResponseCountry = await repository.Get<List<CountryDto>>(countryUrl);
            if (httpResponseCountry.Error)
            {
                var message = await httpResponseCountry.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            Countries = httpResponseCountry.Response!;
            totalPages = httpResponsePages.Response!;    
        }
        catch(Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }


    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
        });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"countries/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Borrado", "El pais fue borrado", SweetAlertIcon.Success);
        await LoadAsync();
    }

    private async Task CleanFiltrAync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CountryEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<CountryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}

