@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if(Countries is null)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}

<GenericList MyList="Countries">
    <Body>
        <div class="card">
            <div class="card-header">
                <span>
                    <MudIcon Icon="@Icons.Material.Filled.List" />Paises
                    <MudButton Class="float-end" @onclick=@(() => ShowModal()) Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Nuevo pais</MudButton>
                </span>
            </div>
            <div class="card-body">
                <div class="sm-2" style="display:flex; flex-wrap:wrap; align-items:center">
                    <div>
                        <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar pais..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <MudButton Variant="Variant.Outlined" @onclick="ApplyFilterAsync" StartIcon="@Icons.Material.Filled.Layers" Color="Color.Default">Filtrar</MudButton>
                        <MudButton Variant="Variant.Outlined" @onclick="CleanFilterAync" StartIcon="@Icons.Material.Filled.LayersClear" Color="Color.Error">Limpiar</MudButton>
                    </div>
                </div>
                <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Pais</th>
                            <th style="width:220px">Estados / Departamentos</th>
                            <th style="width:260px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var country in Countries!)
                        {
                            string url = $"/countries/details/{country.Id}";
                            <tr>
                                <td>
                                    @country.Name
                                </td>
                                <td>
                                    @country.StatesNumber
                                </td>
                                <td>
                                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary">
                                        <MudIconButton href="@url" Icon="@Icons.Material.Filled.List" Color="Color.Info"></MudIconButton>
                                        <MudIconButton @onclick=@(() => ShowModal(country.Id, true)) Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"></MudIconButton>
                                        <MudIconButton @onclick=@(() => DeleteAsync(country.Id)) Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
                                    </MudButtonGroup>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </Body>
</GenericList>

@code {
    private int totalPages;
    private int currentPage = 1;
    public List<CountryDto>? Countries { get; set; }

    [Parameter] 
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter] 
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        string pagueUrl = (string.IsNullOrEmpty(Filter)) ? "countries/totalPages" : $"countries/totalPages?filter={Filter}";
        string countryUrl = (string.IsNullOrEmpty(Filter)) ? $"countries?page={page}" : $"countries?page={page}&filter={Filter}";

        try
        {
            var httpResponsePages = await repository.Get<int>(pagueUrl);
            var httpResponseCountry = await repository.Get<List<CountryDto>>(countryUrl);
            if (httpResponseCountry.Error)
            {
                var message = await httpResponseCountry.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            Countries = httpResponseCountry.Response!;
            totalPages = httpResponsePages.Response!;    
        }
        catch(Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }


    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
        });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"countries/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("El pais fue borrado.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Check; });
        await LoadAsync();
    }

    private async Task CleanFilterAync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CountryEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<CountryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}

