@page "/countries/edit/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles ="Admin")]

<h3>Country Edit</h3>

@if (country is null)
{
    <p>Cargando...</p>
}
else
{
    <CountryForm @ref="countryForm" Country="country" OnValidSubmit="EditAsync" ReturnAction="Back" />
}

@code {
    private CountryDto? country;
    private CountryForm? countryForm;
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<CountryDto>($"countries/id?id={Id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            Back();
        } 

        country = httpResponse.Response;
    }

    private async Task EditAsync()
    {
        var httpResponse = await repository.Put($"countries/id?id={Id}", country);
        if (httpResponse.Error)
        {
            string? message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        await sweetAlertService.FireAsync("Actualizado", "El pais fue Actualizado", SweetAlertIcon.Success);
        Back();
    }

    private void Back()
    {
        countryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/countries");    
    }


}
