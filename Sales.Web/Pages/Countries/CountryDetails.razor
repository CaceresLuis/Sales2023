@page "/countries/details/{Id:int}"
@using Sales.Web.Pages.States;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]
@if (country is null)
{
    <div class="spinner-grow" />
}
else
{
    <GenericList MyList="states">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <a class="btn btn-info float-lg-start" href="/countries"><i class="oi oi-arrow-thick-left"></i></a>
                        <div class="oi oi-flag mx-2 text-xl-start">@country.Name</div>
                        <a class="btn btn-primary float-end" @onclick=@(() => ShowModal(country.Id))>Nuevo Estado<i class="oi oi-plus"></i></a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="sm" style="display:flex; flex-wrap:wrap; align-items:center">
                        <div>
                            <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar pais..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" />Filtrar</button>
                            <button type="button" class="btn btn-primary" @onclick="CleanFiltrAync"><i class="oi oi-ban" />Limpiar</button>
                        </div>
                    </div>
                    <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width:220px">Estados / Departamentos</th>
                                <th style="width:260px">Ciudad</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var state in states!)
                            {
                                <tr>
                                    <td>
                                        @state.Name
                                    </td>
                                    <td>
                                        @state.CitiesNumber
                                    </td>
                                    <td>
                                        <a class="btn btn-info" href="/states/details/@state.Id"><i class="oi oi-list"></i></a>
                                        <a class="btn btn-warning" @onclick=@(() => ShowModal(state.Id, true))><i class="oi oi-pencil"></i></a>
                                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    private int totalPages;
    private int currentPage = 1;
    private CountryDto? country;
    private List<StateDto>? states;
    [Parameter] public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        string pagesUrl = (string.IsNullOrEmpty(Filter)) ? $"States/totalPages?id={Id}" : $"States/totalPages?id={Id}&filter={Filter}";
        string stateUrl = (string.IsNullOrEmpty(Filter)) ? $"States?id={Id}&page={page}" : $"States?id={Id}&page={page}&filter={Filter}";

        var httpResponsePages = await repository.Get<int>(pagesUrl);
        var httpResponseStates = await repository.Get<List<StateDto>>(stateUrl);
        var httpResponseCountry = await repository.Get<CountryDto>($"countries/id?id={Id}");

        if (httpResponseStates.Error)
        {
            var message = await httpResponseStates.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = httpResponseCountry.Response;
        states = httpResponseStates.Response;
        totalPages = httpResponsePages.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"states/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Borrado", "El Departamento / Estado fue borrado", SweetAlertIcon.Success);
        await LoadAsync();
    }

    private async Task CleanFiltrAync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<StateEdit>(string.Empty, new ModalParameters().Add("StateId", id));
        }
        else
        {
            modalReference = Modal.Show<StateCreate>(string.Empty, new ModalParameters().Add("CountryId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}