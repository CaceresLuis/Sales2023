@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <p>Cargando...</p>
}
else
{


    <h3>@country.Name</h3>
    <div class="mb-2" style="display:flex; flex-wrap:wrap; align-items:center">
        <div class="mb-2">
            <a class="btn btn-dark mb-3" href="/countries"><i class="oi oi-arrow-thick-left"></i></a>
            <a class="btn btn-primary mb-3" href="/states/create/@country.Id">Nuevo Estado<i class="oi oi-plus"></i></a>
        </div>
        <div class="mx-2">
            <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar pais..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-primary" @onclick="CleanFiltrAync">Limpiar</button>
        </div>
    </div>
    <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
    <GenericList MyList="states">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th style="width:220px">Estados / Departamentos</th>
                        <th style="width:260px">Ciudad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id"><i class="oi oi-list"></i></a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id"><i class="oi oi-pencil"></i></a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private CountryDto? country;
    private List<StateDto>? states;
    private int currentPage = 1;
    private int totalPages;
    [Parameter] public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
            page = Convert.ToInt32(Page);

        string pagesUrl = string.Empty;
        string stateUrl = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            pagesUrl = $"States/totalPages?id={Id}";
            stateUrl = $"States?id={Id}&page={page}";
        }
        else
        {
            pagesUrl = $"States/totalPages?id={Id}&filter={Filter}";
            stateUrl = $"States?id={Id}&page={page}&filter={Filter}";
        }


        var httpResponsePages = await repository.Get<int>(pagesUrl);
        var httpResponseStates = await repository.Get<List<StateDto>>(stateUrl);
        var httpResponseCountry = await repository.Get<CountryDto>($"countries/id?id={Id}");

        if (httpResponseStates.Error)
        {
            var message = await httpResponseStates.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = httpResponseCountry.Response;
        states = httpResponseStates.Response;
        totalPages = httpResponsePages.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"states/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Borrado", "El Departamento / Estado fue borrado", SweetAlertIcon.Success);
        await LoadAsync();
    }

    private async Task CleanFiltrAync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}