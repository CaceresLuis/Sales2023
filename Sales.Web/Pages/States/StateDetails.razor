@page "/states/details/{StateId:int}"
@using Sales.Web.Pages.Cities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]
@if (state is null)
{
    <div class="spinner-grow" />
}
else
{
    if (cities is not null)
    {
        <GenericList MyList="cities">
            <Body>
                <div class="card">
                    <div class="card-header">
                        <span>
                            <MudButton href="@url" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Color="Color.Primary">Volver</MudButton>
                            <i class="bi bi-flag-fill mx-3">@state.Name</i>
                            <MudButton Class="float-end" @onclick=@(() => ShowModal(state.Id)) Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Nueva Ciudad</MudButton>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="sm" style="display:flex; flex-wrap:wrap; align-items:center">
                            <div>
                                <input style="width:400px" type="text" class="form-control" id="titulo" placeholder="Buscar pais..." @bind-value="Filter" />
                            </div>
                            <div class="mx-1">
                                <MudButton Variant="Variant.Outlined" @onclick="ApplyFilterAsync" StartIcon="@Icons.Material.Filled.Layers" Color="Color.Default">Filtrar</MudButton>
                                <MudButton Variant="Variant.Outlined" @onclick="CleanFilterAync" StartIcon="@Icons.Material.Filled.LayersClear" Color="Color.Error">Limpiar</MudButton>
                            </div>
                        </div>
                        <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Ciudadad</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var city in cities!)
                                {
                                    <tr>
                                        <td>
                                            @city.Name
                                        </td>

                                        <td>
                                            <MudButtonGroup Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary">
                                                <MudIconButton @onclick=@(() => ShowModal(city.Id, true)) Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"></MudIconButton>
                                                <MudIconButton @onclick=@(() => DeleteAsync(city.Id)) Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
                                            </MudButtonGroup>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>
                </div>
            </Body>
        </GenericList>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <span>
                    <MudButton href="@url" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Color="Color.Primary">Volver</MudButton>
                    <i class="bi bi-flag-fill">@state.Name</i>
                    <MudButton Class="float-end" @onclick=@(() => ShowModal(state.Id)) Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Nueva Ciudad</MudButton>
                </span>
            </div>
            <div class="card-body">
                <div>Aun no hay ciudades para este estado</div>
            </div>
        </div>
    }
}

@code {
    private StateDto? state;
    private List<CityDto>? cities;
    private int currentPage = 1;
    private int totalPages;
    private string? url;

    [Parameter] 
    public int StateId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        var httpResponseState = await repository.Get<StateDto>($"states/id?id={StateId}");
        state = httpResponseState.Response;
        if (httpResponseState.Error)
        {
            var message = await httpResponseState.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        if(string.IsNullOrEmpty(Page))
            page = Convert.ToInt32(page);

        string pagesUrl = (string.IsNullOrEmpty(Filter)) ? $"Cities/totalpages?id={StateId}" : $"Cities/totalpages?id={StateId}&filter={Filter}";
        string citiesUrl = (string.IsNullOrEmpty(Filter)) ? $"Cities?id={StateId}&page={page}" : $"Cities?id={StateId}&page={page}&filter={Filter}";

        if(state!.Cities!.Any()){

            var httpResponseCities = await repository.Get<List<CityDto>>($"{citiesUrl}");
            var httpResponsePages = await repository.Get<int>($"{pagesUrl}");
            if (httpResponseCities.Error || httpResponsePages.Error)
            {
                var message = await httpResponseCities.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            cities = httpResponseCities.Response;
            totalPages = httpResponsePages.Response;
        }        
        url = $"/countries/details/{@state.CountryId}";
    }

    private async Task CleanFilterAync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
            return;

        var httpResponse = await repository.Delete($"cities/id?id={id}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("La ciudad fue borrada.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Check; });
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CityEdit>(string.Empty, new ModalParameters().Add("CityId", id));
        }
        else
        {
            modalReference = Modal.Show<CityCreate>(string.Empty, new ModalParameters().Add("StateId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}

