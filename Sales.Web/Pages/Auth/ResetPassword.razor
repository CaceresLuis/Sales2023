@page "/ResetPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if(Loading)
{
    <div class="spinner-grow"/>
}
<div class="row">
    <div class="col-6">
        <EditForm Model="resetPassword" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator/>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-key" /> Cambiar contraseña
                        <button class="btn btn-primary float-end mx-2" type="submit"><i class="oi oi-check"/>Cambiar Contraseña</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Nueva Contraseña</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@resetPassword.Password" />
                            <ValidationMessage For="@(() => resetPassword.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmar Contraseña</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@resetPassword.ConfirmPassword" />
                            <ValidationMessage For="@(() => resetPassword.ConfirmPassword)" />
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private bool Loading;
    private ResetPasswordDto resetPassword = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; } = string.Empty;
    [Parameter]
    [SupplyParameterFromQuery]
    public string UserId { get; set; } = string.Empty;

    private async Task ChangePasswordAsync()
    {
        Loading = true;
        resetPassword.Token = Token;
        resetPassword.UserId = UserId;
        var httpResponse = await repository.Post("accounts/ResetPassword", resetPassword);
        if (httpResponse.Error)
        {
            string? message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            Loading = false;
            return;
        }

        Loading = false;
        await sweetAlertService.FireAsync("Confirmacion", "Su contraseña se ha cambiado correctamente", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/Login");
    }
}
