@page "/Login"
@inject IRepository repository
@inject ILoginService loginService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Inicio de sesion</h3>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="login" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator/>
            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <Icon Name="IconName.User"/> Iniciar Sesion
                        <button class="btn btn-primary float-end" type="submit"><i class="oi oi-check"/>Iniciar Sesion</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Correo</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@login.Email" />
                            <ValidationMessage For="@(() => login.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Contraseña</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@login.Password" />
                            <ValidationMessage For="@(() => login.Password)" />
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <p><a class="bbtn btn-link" href="/RecoverPassword">¿Has olvidado tu contraseña?</a></p>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginDto login = new();

    private async Task LoginAsync()
    {
        var httpResponse = await repository.Post<LoginDto, TokenDto>("Accounts/Login", login);
        if (httpResponse.Error)
        {
            string? message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(httpResponse.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
