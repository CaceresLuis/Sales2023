@page "/ChangePassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading)
{
    <div class="spinner-grow"></div>
}
else
{
    <div class="row">
        <div class="col-6">
            <EditForm Model="changePassword" OnValidSubmit="ChangePasswordAsync">
                <DataAnnotationsValidator/>
                <div class="card">
                    <div class="card-header">
                        <span>
                            <i class="bi bi-key-fill"/> Cambiar Contraseña
                            <MudButton href="/editUser" class="float-end" Variant="Variant.Filled" Color="Color.Surface" StartIcon="@Icons.Material.Filled.ArrowCircleLeft">Regresar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" class="float-end" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Check">Guardar Cambios</MudButton>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label>Contraseña Actual</label>
                            <div>
                                <InputText type="password" class="form-control" @bind-Value="@changePassword.CurrentPassword"/>
                                <ValidationMessage For="@(() => changePassword.CurrentPassword)"/>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Nueva Contraseña</label>
                            <div>
                                <InputText type="password" class="form-control" @bind-Value="@changePassword.NewPassword"/>
                                <ValidationMessage For="@(() => changePassword.NewPassword)"/>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Confirma nueva Contraseña</label>
                            <div>
                                <InputText type="password" class="form-control" @bind-Value="@changePassword.Confirm" />
                                <ValidationMessage For="@(() => changePassword.Confirm)" />
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool loading;
    private ChangePasswordDto changePassword = new();

    private async Task ChangePasswordAsync()
    {
        loading = true;
        var httpResponse = await repository.Post("Accounts/changePassword", changePassword);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        navigationManager.NavigateTo("/");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = true,
            Timer = 5000
        });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con exito");
    }
}
