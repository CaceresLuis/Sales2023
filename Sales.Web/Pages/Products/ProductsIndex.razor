@page "/products"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Products">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="bi bi-star"/> Productos
                        @if (role == "Admin")
                        {
                            <a class="btn btn-sm btn-primary float-end" href="/products/create"><i class="bi bi-plus"/> Nuevo Producto</a>
                        }
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="bi bi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="bi bi-x-octagon-fill" /> Limpiar</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Precio</th>
                                <th>Inventario</th>
                                <th>Categorías</th>
                                <th>Imagenes</th>
                                <th>Imagen Principal</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Products)
                            {
                                <tr>
                                    <td>
                                        @product.Name
                                    </td>
                                    <td>
                                        @product.Description
                                    </td>
                                    <td>
                                        @($"{product.Price:C2}")
                                    </td>
                                    <td>
                                        @($"{product.Stock:N2}")
                                    </td>
                                    <td>
                                        @product.ProductCategories!.Count()
                                    </td>
                                    <td>
                                        @product.ProductImages!.Count()
                                    </td>
                                    <td>
                                        <img src="@product.FistImage" style="width:100px;" />
                                    </td>
                                    @if(role == "Admin")
                                    {
                                        <td>
                                            <a href="/products/edit/@product.Id" class="btn btn-warning"><i class="bi bi-pencil" /> Editar</a>
                                            <button class="btn btn-danger" @onclick=@(() => Delete(product.Id))><i class="bi bi-trash" /> Borrar</button>
                                        </td>
                                    }
                                    else if(role == "User")
                                    {
                                        <td>
                                            <button class="btn btn-primary" @onclick=@(() => Delete(product.Id))><i class="bi bi-cart-plus" /> Comprar</button>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <button class="btn btn-primary" @onclick=@(() => Delete(product.Id))><i class="bi bi-cart-plus" /> Comprar log</button>
                                        </td>
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    public List<ProductDto>? Products { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    private string? role;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
            role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string pageUrl = (string.IsNullOrEmpty(Filter)) ? $"products/totalPages" : $"products/totalPages?filter={Filter}";
        string ProductUrl = (string.IsNullOrEmpty(Filter)) ? $"products?page={page}" : $"products?page={page}&filter={Filter}";

        try
        {
            var httpProductResponse = await repository.Get<List<ProductDto>>(ProductUrl);
            var httpPageResponse = await repository.Get<int>(pageUrl);
            Products = httpProductResponse.Response!;
            totalPages = httpPageResponse.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int productId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
            return;

        var httpResponse = await repository.Delete($"api/products/{productId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var mensajeError = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync(1);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}