@inject ILoginService loginService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<AuthorizeView>
    <Authorized>
        @if (!string.IsNullOrEmpty(photoUser))
        {
            <div class="mx-2">
                <img src="@photoUser" width="50" height="50" style="border-radius:50%">
            </div>
        }
        <MudButton href="EditUser" Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Person">@context.User.Identity!.Name</MudButton>
        <MudButton href="Logout" Variant="Variant.Outlined" Color="Color.Surface" StartIcon="@Icons.Material.Filled.Logout">Cerrar Sesion</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton href="Register" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAddAlt1">Registrarme</MudButton>
        <MudButton href="Login" Variant="Variant.Outlined" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Login">Inicia Sesion</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? photoUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected async override Task OnParametersSetAsync()
    {
        var authenticationState = await authenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        var photoClaim = claims.FirstOrDefault(x => x.Type == "Photo");
        if (photoClaim is not null)
        {
            photoUser = photoClaim.Value;
        }

        if (claims.Any())
        {
            var isActive = await loginService.IstokenActive();

            if (!isActive)
            {
                await sweetAlertService.FireAsync("Error", "Sesion Caducada, Vulelve a loguearte", SweetAlertIcon.Error);
                navigationManager.NavigateTo("/Login");
                return;
            }
        }
    }
}
